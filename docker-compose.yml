version: '3.8'

services:
  neo4j:
    image: neo4j:5.14-community
    container_name: watchman-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-watchman123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - watchman-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: watchman-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-watchman123}
      - OLLAMA_URL=${OLLAMA_URL:-http://192.168.1.69:11434}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - SCREENSHOT_DIR=/var/lib/watchman/shots
      - OCR_DIR=/var/lib/watchman/ocr
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./:/app
      - watchman_data:/var/lib/watchman
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker control
      - ${HOME}:/host_home:ro  # Read-only access to scan projects
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - watchman-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  screenshot-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: watchman-screenshot-worker
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-watchman123}
      - OLLAMA_URL=${OLLAMA_URL:-http://192.168.1.69:11434}
      - SCREENSHOT_INTERVAL=${SCREENSHOT_INTERVAL:-300}  # 5 minutes default
      - DISPLAY=${DISPLAY}
    volumes:
      - ./:/app
      - watchman_data:/var/lib/watchman
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - ${HOME}/.Xauthority:/root/.Xauthority:ro
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - watchman-network
    network_mode: "host"  # Needed for X11 display access
    command: python -m domains.visual_timeline.capture

  ocr-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: watchman-ocr-worker
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-watchman123}
      - OLLAMA_URL=${OLLAMA_URL:-http://192.168.1.69:11434}
    volumes:
      - ./:/app
      - watchman_data:/var/lib/watchman
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - watchman-network
    command: python -m domains.visual_timeline.ocr

  file-watcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: watchman-file-watcher
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-watchman123}
    volumes:
      - ./:/app
      - watchman_data:/var/lib/watchman
      - ${HOME}:/host_home:ro
      - /etc:/host_etc:ro
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - watchman-network
    command: python -m domains.memory_change.watchers.filesystem

  event-watcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: watchman-event-watcher
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-watchman123}
    volumes:
      - ./:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - watchman-network
    command: python -m domains.memory_change.watchers.docker

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  watchman_data:

networks:
  watchman-network:
    driver: bridge
